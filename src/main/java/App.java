import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {

        String itemStr = getItemStr(inputs);

        String promotionStr = getSelectedPromotionStr(inputs);

        String promotionType = "";
        if (promotionStr.contains("Half")) {
            promotionType = "50%_DISCOUNT_ON_SPECIFIED_ITEMS";
        } else if (promotionStr.contains("满30减6")) {
            promotionType = "BUY_30_SAVE_6_YUAN";
        }
        String totalStr = getTotalStr(inputs, promotionType);

        return itemStr + promotionStr + totalStr;
    }

    private String getItemStr(List<String> inputs) {
        List<String> itemNames = getItemNames(inputs);
        List<Integer> itemCounts = getItemCount(inputs);
        List<Double> itemPrices = getItemPrice(inputs);

        StringBuilder itemSb = new StringBuilder("============= Order details =============\n");
        for (int i = 0; i < itemNames.size(); i++) {
            itemSb.append(itemNames.get(i) + " x " + itemCounts.get(i) + " = " + Math.round(itemPrices.get(i)*itemCounts.get(i)) + " yuan\n");
        }
        return itemSb.toString();
    }

    private List<String> getItemNames(List<String> inputs) {
        List<String> itemNames = new ArrayList<>(inputs.size());
        List<Item> items = itemRepository.findAll();
        for (String input : inputs) {
            for (Item item : items) {
                if (item.getId().equals(input.split(" ")[0])) {
                    itemNames.add(item.getName());
                }
            }
        }
        return itemNames;
    }

    private List<Integer> getItemCount(List<String> inputs) {
        List<Integer> counts = new ArrayList<>(inputs.size());
        for (String input : inputs) {
            counts.add(Integer.parseInt(input.split(" ")[2]));
        }
        return counts;
    }

    private List<Double> getItemPrice(List<String> inputs) {
        List<Double> prices = new ArrayList<>(inputs.size());
        List<Item> items = itemRepository.findAll();
        for (String input : inputs) {
            for (Item item : items) {
                if (item.getId().equals(input.split(" ")[0])) {
                    prices.add(item.getPrice());
                }
            }
        }
        return prices;
    }

    private String getSelectedPromotionStr(List<String> inputs) {
        StringBuilder promotionSb = new StringBuilder();
        List<SalesPromotion> promotions = salesPromotionRepository.findAll();
        Set<SalesPromotion> availablePromotions = new HashSet<>();
        for (String input : inputs) {
            for (SalesPromotion promotion : promotions) {
                if (promotion.getRelatedItems().contains(input.split(" ")[0])) {
                    availablePromotions.add(promotion);
                }
            }
        }
        List<Double> itemPrices = getItemPrice(inputs);
        List<Integer> itemCounts = getItemCount(inputs);
        double sumPrice = 0;
        for (int i = 0; i < itemPrices.size(); i++) {
            double price = itemPrices.get(i)*itemCounts.get(i);
            sumPrice += price;
        }

        int save = 0;
        Map<Item, Integer> promotionItemCountMap = generateHalfPromotionItemCountMap(inputs);
        for (Map.Entry<Item, Integer> entry : promotionItemCountMap.entrySet()) {
            save += (entry.getKey().getPrice() * entry.getValue()) / 2;
        }


        StringBuilder halfPromotionItemNames = new StringBuilder();
        for (String input : inputs) {
            for (Item item : promotionItemCountMap.keySet()) {
                if (item.getId().equals(input.split(" ")[0])) {
                    halfPromotionItemNames.append(item.getName()+ "，");
                }
            }
        }


        if (availablePromotions.size() == 2 && sumPrice > 30) {
            if (save > 6) { //half
                promotionSb.append("-----------------------------------\n"+
                        "Promotion used:\n" + "Half price for certain dishes (" + halfPromotionItemNames.substring(0, halfPromotionItemNames.length()-1) +
                        ")，saving " + save + " yuan\n");    //substring左闭右开  去掉末尾的，
            } else {  //30-6
                promotionSb.append("-----------------------------------\n"+
                        "Promotion used:\n" + "满30减6 yuan，saving 6 yuan\n");
            }
        } else if (availablePromotions.size() == 2) {   //half
            promotionSb.append("-----------------------------------\n"+
                    "Promotion used:\n" + "Half price for certain dishes (" + halfPromotionItemNames.substring(0, halfPromotionItemNames.length()-1) +
                    ")，saving " + save + " yuan\n");
        } else if (availablePromotions.size() == 1){
            List<SalesPromotion> availablePromotionsList = new ArrayList<>(availablePromotions);
            if ("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(availablePromotionsList.get(0).getType()) && save > 6) {  //half
                promotionSb.append("-----------------------------------\n"+
                        "Promotion used:\n" + "Half price for certain dishes (" + halfPromotionItemNames.substring(0, halfPromotionItemNames.length()-1) +
                        ")，saving " + save + " yuan\n");
            } else {  //30-6
                promotionSb.append("-----------------------------------\n"+
                        "Promotion used:\n" + "满30减6 yuan，saving 6 yuan\n");
            }
        }
        return promotionSb.toString();
    }

    private String getTotalStr(List<String> inputs, String promotionType) {
        List<Integer> itemCounts = getItemCount(inputs);
        List<Double> itemPrices = getItemPrice(inputs);
        double sum = 0;
        for (int i = 0; i < itemCounts.size(); i++) {
            sum += itemPrices.get(i)*itemCounts.get(i);
        }
        double save = 0;
        int total = 0;
        Map<Item, Integer> promotionItemCountMap = generateHalfPromotionItemCountMap(inputs);
        for (Map.Entry<Item, Integer> entry : promotionItemCountMap.entrySet()) {
            save += (entry.getKey().getPrice() * entry.getValue()) / 2;
        }
        if ("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(promotionType)) {
            total = (int) (sum - save);
        } else if ("BUY_30_SAVE_6_YUAN".equals(promotionType)) {
            total = (int) (sum - 6);
        } else {
            total = (int) sum;
        }
        return "-----------------------------------\n" +
                "Total：" + total + " yuan\n" +
                "===================================";
    }

    //获取map 优惠item -> 数量
    private Map<Item, Integer> generateHalfPromotionItemCountMap(List<String> inputs) {
        Map<Item, Integer> promotionItemCountMap = new HashMap<>();
        List<Item> items = itemRepository.findAll();
        List<String> promotionInputs = new ArrayList<>();
        for (String input : inputs) {
            if (input.contains("ITEM0001") || input.contains("ITEM0022")) {
                promotionInputs.add(input);
            }
        }
        for (String promotionInput : promotionInputs) {
            for (Item item : items) {
                if (item.getId().equals(promotionInput.split(" ")[0])) {
                    promotionItemCountMap.put(item, Integer.parseInt(promotionInput.split(" ")[2]));
                }
            }
        }
        return promotionItemCountMap;
    }
}
